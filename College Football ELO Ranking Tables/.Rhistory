map_id = id),
color = "white",
size = 1,
alpha = 0.2,
fill = 'gray75'
) +
geom_text_repel(airport_labels %>% filter(!dest %in% one_stop_labels$first_stop),
mapping = aes(x = destin_long,
y = destin_lat,
label = dest),
size = 3,
#fontface = 'bold',
family = 'IBM Plex Sans') +
geom_curve(one_stop_coord,
mapping = aes(x = origin_long,
y = origin_lat,
xend = first_long,
yend = first_lat ),
color = '#6baed6',
curvature = 0.1,
size = 1,
alpha = 0.4) +
geom_curve(one_stop_coord,
mapping = aes(x = first_long,
y = first_lat,
xend = destin_long,
yend = destin_lat),
color = '#6baed6',
curvature = -0.1,
size = 1,
alpha = 0.2) +
geom_curve(non_stop_coord,
mapping = aes(x = origin_long,
y = origin_lat,
xend = destin_long,
yend = destin_lat),
#linetype = 'dashed',
curvature = 0.1,
color = '#6baed6',
size = 1.5,
alpha = 0.4) +
geom_point(one_stop_coord,
mapping = aes(x = first_long,
y = first_lat),
color = 'black',
size = 4) +
geom_point(one_stop_coord,
mapping = aes(x = origin_long,
y = origin_lat),
color = 'darkorange',
size = 4) +
geom_point(one_stop_coord %>% filter(!dest %in% one_stop_labels$first_stop),
mapping = aes(x = destin_long,
y = destin_lat),
color = 'black',
size = 1) +
geom_label_repel(one_stop_labels,
mapping = aes(x = first_long,
y = first_lat,
label = first_stop),
alpha = 0.6,
label.size = NA,
seed = 999,
size = 5,
color = 'black',
fontface = 'bold',
family = 'IBM Plex Sans') +
geom_label_repel(one_stop_labels,
mapping = aes(x = first_long,
y = first_lat,
label = first_stop),
label.size = NA,
seed = 999,
size = 5,
fill = NA,
color = 'black',
fontface = 'bold',
family = 'IBM Plex Sans') +
geom_label_repel(mapping = aes(x = 527052.9,
y = -365024.6),
label = 'DSM',
label.size = NA,
seed = 999,
size = 5,
fill = NA,
color = 'black',
fontface = 'bold',
family = 'IBM Plex Sans') +
geom_label_repel(mapping = aes(x = 527052.9,
y = -365024.6),
label = 'DSM',
alpha = 0.6,
label.size = NA,
seed = 999,
size = 5,
color = 'black',
fontface = 'bold',
family = 'IBM Plex Sans') +
coord_equal()
# create a data visualization map that visualizes routes flown by outbound-Des Moines passengers in 2019
# using d1b1 data and on-time performance data from the Bureau of Transportation Statistics
# code by alex elfering
library(tidyverse)
library(data.table)
library(tidylog)
library(albersusa)
library(sp)
library(raster)
library(ggplot2)
library(broom)
library(ggrepel)
# function thanks to: https://stackoverflow.com/questions/2261079/how-can-i-trim-leading-and-trailing-white-space
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
# data load
#on_time <- list.files("C:/Users/alexe/Desktop/Alaska", pattern = "*.csv", full.names = TRUE)
#on_time_df <- rbindlist(lapply(on_time, fread))
db1b <- list.files("C:/Users/alexe/Desktop/Alaska", pattern = "*.csv", full.names = TRUE)
db1b_DF <- rbindlist(lapply(db1b, fread), fill = TRUE)
#colnames(on_time_df) <- tolower(colnames(on_time_df))
colnames(db1b_DF) <- tolower(colnames(db1b_DF))
# lat and long airport data
lat_long <- read.csv('~/airports.csv') %>% filter(grepl('US-', iso_region))
airport_lat_long <- dplyr::select(lat_long, 14, 5, 6) %>% mutate(iata_code = trim(iata_code))
filter_outbound <- dplyr::filter(db1b_DF, ticket_carrier == 'AS') %>%
mutate(airport_group = gsub('\\:', ' ', airport_group),
connections = sapply(strsplit(airport_group, " "), length)-2) %>%
filter(connections <= 2,
year == 2019) %>%
mutate(connecting_airports = case_when(connections == 0 ~ '',
connections == 1 ~ substr(airport_group, 5, 7),
connections == 2 ~ substr(airport_group, 5, 11))) %>%
separate(connecting_airports, into = c('first_stop', 'second_stop'), sep = ' ') %>%
mutate(first_stop = trim(first_stop),
second_stop = trim(second_stop)) %>%
as.tibble() %>%
dplyr::select(year,
reporting_carrier,
ticket_carrier,
airport_group,
origin,
dest,
dest_state_abr,
first_stop,
second_stop,
connections,
passengers)
non_stop <- filter_outbound %>%
filter(connections == 0) %>%
group_by(year,
origin,
dest,
dest_state_abr,
first_stop,
second_stop,
connections) %>%
summarise(pax = sum(passengers)) %>%
ungroup()
one_stop <- filter_outbound %>%
filter(connections == 1) %>%
group_by(year,
origin,
dest,
dest_state_abr,
first_stop,
second_stop,
connections) %>%
summarise(pax = sum(passengers)) %>%
ungroup() %>%
# remove outlier routes
filter(pax > 2)
all_airports <- tibble(airports = trim(unique(c(one_stop$origin, one_stop$dest, non_stop$origin, non_stop$dest)))) %>%
inner_join(airport_lat_long, by = c('airports' = 'iata_code')) # %>% filter(airports == 'MSP')
airports_lat_long <- dplyr::select(all_airports, 3, 2) %>% rename(x = longitude_deg, y = latitude_deg)
coordinates(airports_lat_long) <- ~x+y
proj4string(airports_lat_long) <- CRS(us_longlat_proj)
airports_lat_long <- points_elided(airports_lat_long)
airports_lat_long <- spTransform(airports_lat_long, CRSobj = CRS(us_aeqd_proj))
airports_lat_long <- as.data.frame(coordinates(airports_lat_long))
airport_lat_long_df <- cbind(all_airports, airports_lat_long)
non_stop_coord <- non_stop %>%
left_join(airport_lat_long_df,
by = c('origin' = 'airports')) %>%
dplyr::select(-latitude_deg,
-longitude_deg) %>%
left_join(airport_lat_long_df,
by = c('dest' = 'airports')) %>%
dplyr::select(-latitude_deg,
-longitude_deg) %>%
rename(origin_long = x.x,
origin_lat = y.x,
destin_long = x.y,
destin_lat = y.y)
one_stop_coord <- one_stop %>%
inner_join(airport_lat_long_df,
by = c('origin' = 'airports')) %>%
dplyr::select(-latitude_deg,
-longitude_deg) %>%
inner_join(airport_lat_long_df,
by = c('dest' = 'airports')) %>%
dplyr::select(-latitude_deg,
-longitude_deg) %>%
inner_join(airport_lat_long_df,
by = c('first_stop' = 'airports')) %>%
dplyr::select(-latitude_deg,
-longitude_deg) %>%
rename(origin_long = x.x,
origin_lat = y.x,
destin_long = x.y,
destin_lat = y.y,
first_long = x,
first_lat = y)
airport_flip <- c('CA')
us_map <- fortify(us, region="name")
airport_labels <- bind_rows(one_stop_coord, non_stop_coord) %>%
distinct(dest,
destin_long,
destin_lat)
one_stop_labels <- one_stop_coord %>%
distinct(first_stop,
first_long,
first_lat)
USA <- usa_composite(proj="laea")  # creates map projection
USA_MAP <- tidy(USA, region="name")
# visualization
ggplot() +
geom_map(
data = USA_MAP,
map = USA_MAP,
aes(x = long,
y = lat,
map_id = id),
color = "white",
size = 1,
alpha = 0.2,
fill = 'gray75'
) +
geom_text_repel(airport_labels %>% filter(!dest %in% one_stop_labels$first_stop),
mapping = aes(x = destin_long,
y = destin_lat,
label = dest),
size = 3,
#fontface = 'bold',
family = 'IBM Plex Sans') +
geom_curve(one_stop_coord,
mapping = aes(x = origin_long,
y = origin_lat,
xend = first_long,
yend = first_lat ),
color = '#6baed6',
curvature = 0.1,
size = 1,
alpha = 0.4) +
geom_curve(one_stop_coord,
mapping = aes(x = first_long,
y = first_lat,
xend = destin_long,
yend = destin_lat),
color = '#6baed6',
curvature = -0.1,
size = 1,
alpha = 0.2) +
geom_curve(non_stop_coord,
mapping = aes(x = origin_long,
y = origin_lat,
xend = destin_long,
yend = destin_lat),
#linetype = 'dashed',
curvature = 0.1,
color = '#6baed6',
size = 1.5,
alpha = 0.4) +
geom_point(one_stop_coord,
mapping = aes(x = first_long,
y = first_lat),
color = 'black',
size = 4) +
geom_point(one_stop_coord,
mapping = aes(x = origin_long,
y = origin_lat),
color = 'darkorange',
size = 4) +
geom_point(one_stop_coord %>% filter(!dest %in% one_stop_labels$first_stop),
mapping = aes(x = destin_long,
y = destin_lat),
color = 'black',
size = 1) +
geom_label_repel(one_stop_labels,
mapping = aes(x = first_long,
y = first_lat,
label = first_stop),
alpha = 0.6,
label.size = NA,
seed = 999,
size = 5,
color = 'black',
fontface = 'bold',
family = 'IBM Plex Sans') +
geom_label_repel(one_stop_labels,
mapping = aes(x = first_long,
y = first_lat,
label = first_stop),
label.size = NA,
seed = 999,
size = 5,
fill = NA,
color = 'black',
fontface = 'bold',
family = 'IBM Plex Sans') +
geom_label_repel(mapping = aes(x = 527052.9,
y = -365024.6),
label = 'DSM',
label.size = NA,
seed = 999,
size = 5,
fill = NA,
color = 'black',
fontface = 'bold',
family = 'IBM Plex Sans') +
geom_label_repel(mapping = aes(x = 527052.9,
y = -365024.6),
label = 'DSM',
alpha = 0.6,
label.size = NA,
seed = 999,
size = 5,
color = 'black',
fontface = 'bold',
family = 'IBM Plex Sans') +
coord_equal()
# creating a table to rank college football teams based on the College Football ELO Model
library(tidyverse)
library(glue)
library(gt)
library(htmltools)
options(scipen = 999)
setwd('~/GitHub/Sports/College Football ELO Ranking Tables')
# load the elo model and schedule data
full_elo_df <- read.csv('~/GitHub/Sports/College Football ELO Model/Data/FullELODF.csv') %>% select(-1)
conferences <- read.csv('~/GitHub/Sports/College Football Schedule Scrapping/Data/Conferences.csv') %>% select(-1)
fbs_schedule <- read.csv('~/GitHub/Sports/College Football Schedule Scrapping/Data/FBS Full Schedule.csv') %>% select(-1)
season_var <- 2022
# what is the latest week in the season selected?
season_wk <- full_elo_df %>%
filter(season == season_var) %>%
filter(wk == max(wk)) %>%
select(wk) %>%
slice(1) %>%
as.numeric()
season_label <- season_wk-1
# variables for the gt table
up_arrow <- "<span style=\"color:#4292c6\">&#9650;</span>"
down_arrow <- "<span style=\"color:#ef6548\">&#9660;</span>"
no_arrow <- "<span style=\"color:#fed976\">&#9644;</span>"
plus_symbol <- function(.x) {
glue::glue("+{.x}")
}
# what games have been played for each team and who is next?
latest_results <- fbs_schedule %>%
filter(wk == season_wk,
season == season_var) %>%
select(wk,
school,
pts,
opp,
opponent,
location) %>%
filter(!is.na(pts)) %>%
mutate(result = ifelse(pts > opp, 'W', 'L'),
result_label = paste(result, ' ', location, ' ', opponent, ' ', pts, '-', opp, sep = '')) %>%
select(school,
result_label)
next_match <- fbs_schedule %>%
filter(wk == season_wk + 1,
season == season_var) %>%
select(wk,
school,
pts,
opp,
opponent,
location) %>%
mutate(next_label = paste(location, opponent, sep = ' ')) %>%
select(school,
next_label)
# calculate rankings by week for the season
pre_ratings <- full_elo_df %>%
inner_join(conferences,
by = c('season' = 'season',
'team_a' = 'school')) %>%
filter(season == season_var) %>%
group_by(team_a) %>%
filter(wk == min(wk)) %>%
ungroup() %>%
mutate(pre_elo = case_when(pts > opp ~ elo_a-elo_adj,
pts < opp ~ elo_a+elo_adj)) %>%
mutate(wk = 0) %>%
select(season,
wk,
team_a,
elo_a = pre_elo) %>%
mutate(rank = dense_rank(desc(elo_a)),
wins = 0,
loses = 0)
season_wk_ranks <- full_elo_df %>%
filter(season == season_var) %>%
select(season,
wk,
team_a,
elo_a,
elo_adj) %>%
arrange(team_a,
wk) %>%
group_by(team_a) %>%
complete(wk = seq.int(1, season_wk, 1)) %>%
bind_rows(pre_ratings) %>%
arrange(wk) %>%
fill(season) %>%
fill(elo_a) %>%
mutate(wins = ifelse(elo_a > lag(elo_a) & wk != 0, 1, 0),
loses = ifelse(elo_a < lag(elo_a) & wk != 0,1, 0),
elo_adj = elo_a - lag(elo_a)) %>%
fill(loses, .direction = 'up') %>%
fill(wins, .direction = 'up') %>%
mutate(roll_wins = cumsum(wins),
roll_loses = cumsum(loses)) %>%
ungroup() %>%
group_by(wk) %>%
mutate(rank = dense_rank(desc(elo_a))) %>%
ungroup() %>%
group_by(team_a) %>%
mutate(prev_rank = lag(rank),
jump = (rank-lag(rank) ),
jump = ifelse(jump < 0, jump*-1, jump*-1)) %>%
ungroup() %>%
inner_join(conferences,
by = c('season' = 'season',
'team_a' = 'school')) %>%
arrange(wk,
rank) %>%
unite(conf, c('conf', 'div'), sep = ' ', na.rm = TRUE) %>%
unite(record, c('roll_wins', 'roll_loses'), sep = '-') %>%
select(wk,
team_a,
conf,
rank,
jump,
record,
elo_a,
elo_adj)
# what teams are almost in the rankings?
almost <- season_wk_ranks %>%
filter(wk == season_wk) %>%
filter(rank > 25 & rank <= 35) %>%
select(team_a) %>%
mutate(index = row_number()) %>%
pivot_wider(names_from = index,
values_from = team_a) %>%
unite(team_almost, c(1:10), sep = ', ')
teams_almost <- as.character(almost$team_almost)
# what teams are in the rankings?
teams_ranked <- season_wk_ranks %>%
filter(wk == season_wk) %>%
filter(rank <= 25) %>%
left_join(latest_results,
by = c('team_a' = 'school')) %>%
left_join(next_match,
by = c('team_a' = 'school')) %>%
mutate(result_label = ifelse(is.na(result_label), 'Did not play', result_label),
next_label = ifelse(is.na(next_label), 'Does not play', next_label)) %>%
select(rank,
team_a,
conf,
jump,
record,
elo_a,
elo_adj,
result_label,
next_label) %>%
mutate(elo_a = round(elo_a, 1),
elo_adj = round(elo_adj, 1)) %>%
rename(School = team_a,
Record = record,
`Conference & Div` = conf,
Rank = rank,
`Jump from Prior Week` = jump,
`Current ELO` = elo_a,
`Change from Prior Week` = elo_adj,
`Game Result` = result_label,
`Next Match` = next_label)
View(season_wk_ranks)
# summarizes the average brier score for every variable test done for the College Football ELO Model
library(data.table)
library(tidyverse)
library(ggplot2)
library(glue)
library(ggbeeswarm)
options(scipen = 999)
test_scores <- list.files('~/GitHub/Sports/College Football ELO Model/Testing/Test Data', pattern = "*.csv", full.names = TRUE)
test_scores_df <- as.data.frame(rbindlist(lapply(test_scores, fread)))
brier_scores <- test_scores_df %>%
#filter(wins == 1) %>%
mutate(brier = ifelse(wins == 1, brier, NA)) %>%
separate(group, into = c('lower', 'upper'), sep = ',') %>%
mutate(lower = as.numeric(gsub('\\(', '', lower)),
upper = as.numeric(gsub('\\]', '', upper))) %>%
group_by(test_no,
k_val,
home_adv,
regress_val) %>%
summarise(brier_mean_overall = mean(brier, na.rm = TRUE)) %>%
ungroup() %>%
arrange(brier_mean_overall)
View(brier_scores)
