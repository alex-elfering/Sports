}
# pull the conferences by school for each season  ----
school_conf_list <- list()
for(i in season_var){
tryCatch({
seasons_url <- glue('https://www.sports-reference.com/cfb/years/{i}-ratings.html')
schedules <- read_html(seasons_url)
ratings_df <- schedules %>%
html_table(fill = TRUE) %>%
as.data.frame() %>%
select(2, 3)
colnames(ratings_df) <- gsub(" ", "_", as.character(ratings_df[1,]))
school_conf_div <- ratings_df %>%
slice(-1) %>%
select(School,
Conf) %>%
separate(Conf, into = c('Conf', 'Div'),sep = '\\(') %>%
mutate(Div = gsub('\\)', '', Div)) %>%
mutate(Season = i) %>%
filter(School != '',
School != 'School')
school_conf_list[[i]] <- school_conf_div
}, error=function(e){})
}
conferences <- rbindlist(school_conf_list, fill = TRUE) %>%
mutate(School = case_when(School == 'UTEP' ~ 'Texas-El Paso',
School == 'UAB' ~ 'Alabama-Birmingham',
School == 'BYU' ~ "Brigham Young",
School == 'UCF' ~ "Central Florida",
School == "LSU" ~ "Louisiana State",
School == "Ole Miss" ~ "Mississippi",
School == "Pitt" ~ "Pittsburgh",
School == "USC" ~ 'Southern California',
School == 'SMU' ~ "Southern Methodist",
School == 'UTSA' ~ 'Texas-San Antonio',
TRUE ~ School),
School = trim(School),
Conf = trim(Conf))
season_dates <- rbindlist(seasons_dates_list, fill = TRUE)
# clean the schedules ----
# return the season for each date respectively
clean_schedule_df <- rbindlist(school_seasons_schedule_list, fill = TRUE) %>%
select(-Var.8,
-Var.9) %>%
unite(Location, c('Var.5', 'Var.6'), na.rm = TRUE) %>%
mutate(school_ranking = gsub('[A-Za-z]', '', School),
opponent_ranking = gsub('[A-Za-z]', '', Opponent),
school_ranking = gsub('[:punct:]', '', school_ranking),
opponent_ranking = gsub('[:punct:]', '', opponent_ranking)) %>%
mutate(School = trim(stri_trim_both(str_remove_all(School, paste(rank_patterns, collapse = "|")))),
Opponent = trim(stri_trim_both(str_remove_all(Opponent, paste(rank_patterns, collapse = "|"))))) %>%
mutate(School = case_when(School == 'UTEP' ~ 'Texas-El Paso',
School == 'UAB' ~ 'Alabama-Birmingham',
School == 'BYU' ~ "Brigham Young",
School == 'UCF' ~ "Central Florida",
School == "LSU" ~ "Louisiana State",
School == "Ole Miss" ~ "Mississippi",
School == "Pitt" ~ "Pittsburgh",
School == "USC" ~ 'Southern California',
School == 'SMU' ~ "Southern Methodist",
School == 'UTSA' ~ 'Texas-San Antonio',
TRUE ~ School),
School = trim(School)) %>%
mutate(Opponent = case_when(Opponent == 'UTEP' ~ 'Texas-El Paso',
Opponent == 'UAB' ~ 'Alabama-Birmingham',
Opponent == 'BYU' ~ "Brigham Young",
Opponent == 'UCF' ~ "Central Florida",
Opponent == "LSU" ~ "Louisiana State",
Opponent == "Ole Miss" ~ "Mississippi",
Opponent == "Pitt" ~ "Pittsburgh",
Opponent == "USC" ~ 'Southern California',
Opponent == 'SMU' ~ "Southern Methodist",
Opponent == 'UTSA' ~ 'Texas-San Antonio',
TRUE ~ Opponent),
Opponent = trim(Opponent))
games_lost <- clean_schedule_df %>%
select(Date,
#Day,
School = Opponent,
Location,
Opponent = School,
Pts = Opp,
Opp = Pts) %>%
mutate(Location = case_when(Location == '@' ~ '',
Location == '' ~ '@',
Location == 'N' ~ 'N'))
games_won <- clean_schedule_df %>%
select(Date,
School,
Location,
Opponent,
Pts,
Opp)
full_cfb_schedule <- bind_rows(games_won, games_lost) %>%
distinct() %>%
left_join(season_dates) %>%
left_join(conferences,
by = c('Opponent' = 'School',
'Season' = 'Season')) %>%
select(-Div) %>%
rename(Opp_Conf = Conf) %>%
#    ensure that the matches are ordered by year, month, and date
separate(Date,
into = c('Month', 'Day', 'Year'),
sep = ' ') %>%
mutate(Month = match(trim(Month), month.abb),
Day = as.numeric(gsub('\\,', '', Day),
Year = as.numeric(trim(Year)))) %>%
arrange(Year,
Month,
Day)
winning_games <- full_cfb_schedule %>%
mutate(Wins = ifelse(Pts > Opp, 1, 0),
HomeAdv = case_when(Location == '' ~ adv,
Location == '@' ~ adv*-1,
Location == 'N' ~ 0),
AwayAdv = case_when(Location == '' ~ adv*-1,
Location == '@' ~ adv,
Location == 'N' ~ 0)) %>%
filter(Pts > Opp) %>%
arrange(Year,
Month,
Day) %>%
as.tibble()
colnames(full_cfb_schedule) <- tolower(colnames(full_cfb_schedule))
colnames(winning_games) <- tolower(colnames(winning_games))
colnames(conferences) <- tolower(colnames(conferences))
write.csv(conferences, '~/GitHub/Sports/College Football Schedule Scrapping/Data/Conferences.csv')
write.csv(full_cfb_schedule, '~/GitHub/Sports/College Football Schedule Scrapping/Data/FBS Full Schedule.csv')
write.csv(winning_games, '~/GitHub/Sports/College Football Schedule Scrapping/Data/FBS Winning Games.csv')
#### ELO MODEL
# generates historical ELO ratings for each CFB team in FBS
# HUGE THANKS TO https://www.sports-reference.com/ for providing the data
library(elo)
library(data.table)
library(tidyverse)
library(ggplot2)
library(rvest)
library(stringi)
library(glue)
# data sources ----
source('~/CFB Parent Variables.R')
source('~/GitHub/Sports/College Football ELO Model/2022-09-22 ELO Functions.R')
all_schools <- winning_games$school
all_opponents <- winning_games$opponent
init_ratings <- tibble(school = unique(c(all_opponents, all_schools)),
rating = 1500)
use_elo_df <- data.frame()
new_ratings <- data.frame()
week_games <- list()
season_games <- list()
for(a in season_var){
use_season <- winning_games %>%
mutate(wk = as.numeric(wk),
loses = ifelse(pts < opp, 1, 0),
ties = ifelse(pts == opp, 1, 0)) %>%
filter(season == a)
beg_week <- min(use_season$wk)
end_week <- max(use_season$wk)
for(i in beg_week:end_week){
#i <- 1
if(i == 1 & a == 1869){
use_elo_df <- init_ratings
}else{
use_elo_df <- new_ratings
}
week_update <- elo_week_update(df = use_season, team_adv = 50, opp_adv = -50, k_val = 40)
new_ratings <- team_elo_scores(df = week_update)
if(i == end_week){
#print('Regress happens')
season_conf <- conferences %>%
filter(season == a) %>%
#mutate(Conf = trim(Conf)) %>%
select(school,
conf)
season_regress <- regress_ratings(conf_df = season_conf, df = new_ratings, regress_val = 0.4)
new_ratings <- season_regress %>%
select(school,
rating = regress_rating)
print(a)
print(season_regress %>% mutate(season = a))
}else{
new_ratings <- new_ratings
}
week_games[[i]] <- week_update
}
season_df <- rbindlist(week_games)
season_games[[a]] <- season_df
}
elo_df <- rbindlist(season_games, fill = TRUE) %>%
distinct() %>%
rename(elo_a = school_elo,
elo_b = opponent_elo,
p_a = p_team,
team_a = school,
team_b = opponent) %>%
select(-p_opponent) %>%
arrange(year,
month,
day)
full_elo_df <- elo_df %>%
distinct() %>%
select(season,
wk,
month,
day,
year,
team_a = team_b,
team_b = team_a,
location,
pts = opp,
opp = pts,
ps,
elo_adj,
p_a,
elo_a = elo_b,
elo_b = elo_a) %>%
mutate(p_a = 1-p_a,
location = case_when(location == '' ~ '@',
location == '@' ~ '',
location == 'N' ~ 'N')) %>%
bind_rows(elo_df)
write.csv(elo_df, '~/GitHub/Sports/College Football ELO Model/Data/ELODF.csv')
write.csv(full_elo_df, '~/GitHub/Sports/College Football ELO Model/Data/FullELODF.csv')
#### ELO MODEL
# generates historical ELO ratings for each CFB team in FBS
# HUGE THANKS TO https://www.sports-reference.com/ for providing the data
library(elo)
library(data.table)
library(tidyverse)
library(ggplot2)
library(rvest)
library(stringi)
library(glue)
# data sources ----
source('~/CFB Parent Variables.R')
source('~/GitHub/Sports/College Football ELO Model/2022-09-22 ELO Functions.R')
conferences <- read.csv('~/GitHub/Sports/College Football Schedule Scrapping/Data/Conferences.csv') %>%  select(-X)
winning_games <- read.csv('~/GitHub/Sports/College Football Schedule Scrapping/Data/FBS Winning Games.csv') %>% select(-X)
winning_games
View(winning_games)
all_schools <- winning_games$school
all_opponents <- winning_games$opponent
init_ratings <- tibble(school = unique(c(all_opponents, all_schools)),
rating = 1500)
use_elo_df <- data.frame()
new_ratings <- data.frame()
week_games <- list()
season_games <- list()
for(a in season_var){
use_season <- winning_games %>%
mutate(wk = as.numeric(wk),
loses = ifelse(pts < opp, 1, 0),
ties = ifelse(pts == opp, 1, 0)) %>%
filter(season == a)
beg_week <- min(use_season$wk)
end_week <- max(use_season$wk)
for(i in beg_week:end_week){
#i <- 1
if(i == 1 & a == 1869){
use_elo_df <- init_ratings
}else{
use_elo_df <- new_ratings
}
week_update <- elo_week_update(df = use_season, team_adv = 50, opp_adv = -50, k_val = 40)
new_ratings <- team_elo_scores(df = week_update)
if(i == end_week){
#print('Regress happens')
season_conf <- conferences %>%
filter(season == a) %>%
#mutate(Conf = trim(Conf)) %>%
select(school,
conf)
season_regress <- regress_ratings(conf_df = season_conf, df = new_ratings, regress_val = 0.4)
new_ratings <- season_regress %>%
select(school,
rating = regress_rating)
print(a)
print(season_regress %>% mutate(season = a))
}else{
new_ratings <- new_ratings
}
week_games[[i]] <- week_update
}
season_df <- rbindlist(week_games)
season_games[[a]] <- season_df
}
season_var
end_week
winning_games
use_season
a
winning_games
# CFB Schedule Scrapping
# pulls school wins, losses, and conference data to use in the ELO Model
# HUGE THANKS TO https://www.sports-reference.com/ for providing the data
# data and variable loading  ----
source('~/CFB Parent Variables.R')
# pull cfb schedules  ----
schools_url <- 'https://www.sports-reference.com/cfb/schools/'
schools <- read_html(schools_url)
change_school_names(schools_list, school, school)
schools_list <- schools %>%
html_table(fill = TRUE) %>%
as.data.frame() %>%
select(2, 3, 4) %>%
filter(Var.2 != '',
Var.2 != 'School') %>%
mutate(Var.3 = as.numeric(Var.3),
Var.4 = as.numeric(Var.4)) %>%
group_by(Var.2) %>%
complete(Var.3 = seq(min(Var.3), max(Var.4))) %>%
rename(school = 1,
seasons = 2) %>%
select(-Var.4) %>%
mutate(school = case_when(school == 'UTEP' ~ 'Texas-El Paso',
school == 'UAB' ~ 'Alabama-Birmingham',
school == 'BYU' ~ "brigham-young",
school == 'UCF' ~ "Central Florida",
school == "LSU" ~ "Louisiana State",
school == "Ole Miss" ~ "Mississippi",
school == "Pitt" ~ "Pittsburgh",
school == "USC" ~ 'Southern California',
school == 'SMU' ~ "Southern Methodist",
school == 'UTSA' ~ 'Texas-San Antonio',
school == 'Louisiana' ~ 'louisiana-lafayette',
school == 'Bowling Green' ~ 'Bowling Green State',
school == 'The Citadel' ~ 'Citadel',
TRUE ~ school)) %>%
filter(school != '') %>%
mutate(school = tolower(school),
school = gsub(' ', '-', school),
school = gsub("'", '', school),
school = gsub('\\-&-', '-', school),
school = gsub('\\&', '', school),
school = gsub('[()]', '', school)) %>%
rename(school_code = school) %>%
mutate(school_url = paste('https://www.sports-reference.com/cfb/schools/',school_code,'/',seasons,'-schedule.html', sep = ''))
# pull schedules for each school  ----
school_seasons_schedule_list <- list()
for(i in schools_list$school_url){
tag_used <- schools_list %>%
filter(school_url == i)
tryCatch({
schedules <- read_html(i)
schedules_list <- schedules %>% html_table(fill = TRUE)
if(length(schedules_list) == 1){
cfb_item <- as.data.frame(schedules_list[1]) %>% mutate(tag = tag_used$school_code)
}else if(length(schedules_list) == 2){
cfb_item <- as.data.frame(schedules_list[2]) %>% mutate(tag = tag_used$school_code)
}
print(i)
print(cfb_item)
school_seasons_schedule_list[[i]] <- cfb_item
}, error=function(e){})
}
# pull the weeks for each season  ----
seasons_dates_list <- list()
for(i in season_var){
tryCatch({
seasons_url <- glue('https://www.sports-reference.com/cfb/years/{i}-schedule.html')
schedules <- read_html(seasons_url)
schedule_season <- schedules %>% html_table(fill = TRUE)
seasons_dates <- schedule_season[1] %>%
as.data.frame() %>%
mutate(Season = i) %>%
select(Season,
Wk,
Date) %>%
distinct() %>%
filter(Date != 'Date')
print(seasons_dates)
seasons_dates_list[[i]] <- seasons_dates
}, error=function(e){})
}
# pull the conferences by school for each season  ----
school_conf_list <- list()
for(i in season_var){
tryCatch({
seasons_url <- glue('https://www.sports-reference.com/cfb/years/{i}-ratings.html')
schedules <- read_html(seasons_url)
ratings_df <- schedules %>%
html_table(fill = TRUE) %>%
as.data.frame() %>%
select(2, 3)
colnames(ratings_df) <- gsub(" ", "_", as.character(ratings_df[1,]))
school_conf_div <- ratings_df %>%
slice(-1) %>%
select(School,
Conf) %>%
separate(Conf, into = c('Conf', 'Div'),sep = '\\(') %>%
mutate(Div = gsub('\\)', '', Div)) %>%
mutate(Season = i) %>%
filter(School != '',
School != 'School')
school_conf_list[[i]] <- school_conf_div
}, error=function(e){})
}
conferences <- rbindlist(school_conf_list, fill = TRUE) %>%
mutate(School = case_when(School == 'UTEP' ~ 'Texas-El Paso',
School == 'UAB' ~ 'Alabama-Birmingham',
School == 'BYU' ~ "Brigham Young",
School == 'UCF' ~ "Central Florida",
School == "LSU" ~ "Louisiana State",
School == "Ole Miss" ~ "Mississippi",
School == "Pitt" ~ "Pittsburgh",
School == "USC" ~ 'Southern California',
School == 'SMU' ~ "Southern Methodist",
School == 'UTSA' ~ 'Texas-San Antonio',
TRUE ~ School),
School = trim(School),
Conf = trim(Conf))
season_dates <- rbindlist(seasons_dates_list, fill = TRUE)
# clean the schedules ----
# return the season for each date respectively
clean_schedule_df <- rbindlist(school_seasons_schedule_list, fill = TRUE) %>%
select(-Var.8,
-Var.9) %>%
unite(Location, c('Var.5', 'Var.6'), na.rm = TRUE) %>%
mutate(school_ranking = gsub('[A-Za-z]', '', School),
opponent_ranking = gsub('[A-Za-z]', '', Opponent),
school_ranking = gsub('[:punct:]', '', school_ranking),
opponent_ranking = gsub('[:punct:]', '', opponent_ranking)) %>%
mutate(School = trim(stri_trim_both(str_remove_all(School, paste(rank_patterns, collapse = "|")))),
Opponent = trim(stri_trim_both(str_remove_all(Opponent, paste(rank_patterns, collapse = "|"))))) %>%
mutate(School = case_when(School == 'UTEP' ~ 'Texas-El Paso',
School == 'UAB' ~ 'Alabama-Birmingham',
School == 'BYU' ~ "Brigham Young",
School == 'UCF' ~ "Central Florida",
School == "LSU" ~ "Louisiana State",
School == "Ole Miss" ~ "Mississippi",
School == "Pitt" ~ "Pittsburgh",
School == "USC" ~ 'Southern California',
School == 'SMU' ~ "Southern Methodist",
School == 'UTSA' ~ 'Texas-San Antonio',
TRUE ~ School),
School = trim(School)) %>%
mutate(Opponent = case_when(Opponent == 'UTEP' ~ 'Texas-El Paso',
Opponent == 'UAB' ~ 'Alabama-Birmingham',
Opponent == 'BYU' ~ "Brigham Young",
Opponent == 'UCF' ~ "Central Florida",
Opponent == "LSU" ~ "Louisiana State",
Opponent == "Ole Miss" ~ "Mississippi",
Opponent == "Pitt" ~ "Pittsburgh",
Opponent == "USC" ~ 'Southern California',
Opponent == 'SMU' ~ "Southern Methodist",
Opponent == 'UTSA' ~ 'Texas-San Antonio',
TRUE ~ Opponent),
Opponent = trim(Opponent))
games_lost <- clean_schedule_df %>%
select(Date,
#Day,
School = Opponent,
Location,
Opponent = School,
Pts = Opp,
Opp = Pts) %>%
mutate(Location = case_when(Location == '@' ~ '',
Location == '' ~ '@',
Location == 'N' ~ 'N'))
games_won <- clean_schedule_df %>%
select(Date,
School,
Location,
Opponent,
Pts,
Opp)
full_cfb_schedule <- bind_rows(games_won, games_lost) %>%
distinct() %>%
left_join(season_dates) %>%
left_join(conferences,
by = c('Opponent' = 'School',
'Season' = 'Season')) %>%
select(-Div) %>%
rename(Opp_Conf = Conf) %>%
#    ensure that the matches are ordered by year, month, and date
separate(Date,
into = c('Month', 'Day', 'Year'),
sep = ' ') %>%
mutate(Month = match(trim(Month), month.abb),
Day = as.numeric(gsub('\\,', '', Day),
Year = as.numeric(trim(Year)))) %>%
arrange(Year,
Month,
Day)
winning_games <- full_cfb_schedule %>%
mutate(Wins = ifelse(Pts > Opp, 1, 0),
HomeAdv = case_when(Location == '' ~ adv,
Location == '@' ~ adv*-1,
Location == 'N' ~ 0),
AwayAdv = case_when(Location == '' ~ adv*-1,
Location == '@' ~ adv,
Location == 'N' ~ 0)) %>%
filter(Pts > Opp) %>%
arrange(Year,
Month,
Day) %>%
as.tibble()
colnames(full_cfb_schedule) <- tolower(colnames(full_cfb_schedule))
colnames(winning_games) <- tolower(colnames(winning_games))
colnames(conferences) <- tolower(colnames(conferences))
write.csv(conferences, '~/GitHub/Sports/College Football Schedule Scrapping/Data/Conferences.csv')
write.csv(full_cfb_schedule, '~/GitHub/Sports/College Football Schedule Scrapping/Data/FBS Full Schedule.csv')
write.csv(winning_games, '~/GitHub/Sports/College Football Schedule Scrapping/Data/FBS Winning Games.csv')
source('~/CFB Parent Variables.R')
source('~/GitHub/Sports/College Football ELO Model/2022-09-22 ELO Functions.R')
winning_games
View(winning_games)
View(schools_list)
View(schools_list)
View(clean_schedule_df)
full_elo_df
