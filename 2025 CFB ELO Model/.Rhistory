pts = opp,
opp = pts,
ps,
elo_adj,
p_a,
elo_a = elo_b,
elo_b = elo_a) |>
mutate(p_a = 1-p_a,
location = case_when(location == '' ~ '@',
location == '@' ~ '',
location == 'N' ~ 'N')) |>
bind_rows(elo_df) |>
mutate(result = case_when(pts > opp ~ 'W',
pts < opp ~ 'L',
pts == opp ~ 'T'))
full_elo_df %>%
filter(season >= 2006,
team_a == 'Nebraska') %>%              # only games where school won
#arrange(desc(elo_adj)) %>%                # ascending predicted win probability
#slice_head(n = 10) |>
mutate(p_a = round(p_a*100,1),
elo_adj = round(elo_adj,1)) |>
arrange(wk,
team_a) |>
mutate(game_no = row_number()) |>
ggplot() +
geom_line(mapping = aes(x = game_no,
y = elo_a,
group = season))
full_elo_df %>%
filter(season >= 2006,
team_a == 'Nebraska') %>%              # only games where school won
#arrange(desc(elo_adj)) %>%                # ascending predicted win probability
#slice_head(n = 10) |>
mutate(p_a = round(p_a*100,1),
elo_adj = round(elo_adj,1)) |>
arrange(wk,
team_a) |>
mutate(game_no = row_number())
full_elo_df %>%
filter(season >= 2006,
team_a == 'Nebraska') %>%              # only games where school won
#arrange(desc(elo_adj)) %>%                # ascending predicted win probability
#slice_head(n = 10) |>
mutate(p_a = round(p_a*100,1),
elo_adj = round(elo_adj,1)) |>
arrange(team_a,
season,
wk) |>
mutate(game_no = row_number()) |>
ggplot() +
geom_line(mapping = aes(x = game_no,
y = elo_a,
group = season))
full_elo_df %>%
filter(season >= 2006,
team_a == 'Tennessee') %>%              # only games where school won
#arrange(desc(elo_adj)) %>%                # ascending predicted win probability
#slice_head(n = 10) |>
mutate(p_a = round(p_a*100,1),
elo_adj = round(elo_adj,1)) |>
arrange(team_a,
season,
wk) |>
mutate(game_no = row_number()) |>
ggplot() +
geom_line(mapping = aes(x = game_no,
y = elo_a,
group = season))
full_elo_df %>%
filter(season >= 1980,
team_a == 'Tennessee') %>%              # only games where school won
#arrange(desc(elo_adj)) %>%                # ascending predicted win probability
#slice_head(n = 10) |>
mutate(p_a = round(p_a*100,1),
elo_adj = round(elo_adj,1)) |>
arrange(team_a,
season,
wk) |>
mutate(game_no = row_number()) |>
ggplot() +
geom_line(mapping = aes(x = game_no,
y = elo_a,
group = season))
full_elo_df %>%
filter(season >= 1980,
team_a == 'UCLA') %>%              # only games where school won
#arrange(desc(elo_adj)) %>%                # ascending predicted win probability
#slice_head(n = 10) |>
mutate(p_a = round(p_a*100,1),
elo_adj = round(elo_adj,1)) |>
arrange(team_a,
season,
wk) |>
mutate(game_no = row_number()) |>
ggplot() +
geom_line(mapping = aes(x = game_no,
y = elo_a,
group = season))
full_elo_df %>%
filter(season >= 1980,
team_a == 'Southern California') %>%              # only games where school won
#arrange(desc(elo_adj)) %>%                # ascending predicted win probability
#slice_head(n = 10) |>
mutate(p_a = round(p_a*100,1),
elo_adj = round(elo_adj,1)) |>
arrange(team_a,
season,
wk) |>
mutate(game_no = row_number()) |>
ggplot() +
geom_line(mapping = aes(x = game_no,
y = elo_a,
group = season))
full_elo_df %>%
filter(season >= 1960,
team_a == 'Southern California') %>%              # only games where school won
#arrange(desc(elo_adj)) %>%                # ascending predicted win probability
#slice_head(n = 10) |>
mutate(p_a = round(p_a*100,1),
elo_adj = round(elo_adj,1)) |>
arrange(team_a,
season,
wk) |>
mutate(game_no = row_number()) |>
ggplot() +
geom_line(mapping = aes(x = game_no,
y = elo_a,
group = season))
full_elo_df %>%
filter(season >= 1960,
team_a == 'Texas') %>%              # only games where school won
#arrange(desc(elo_adj)) %>%                # ascending predicted win probability
#slice_head(n = 10) |>
mutate(p_a = round(p_a*100,1),
elo_adj = round(elo_adj,1)) |>
arrange(team_a,
season,
wk) |>
mutate(game_no = row_number()) |>
ggplot() +
geom_line(mapping = aes(x = game_no,
y = elo_a,
group = season))
gc()
#### ELO MODEL
# generates historical ELO ratings for each CFB team in FBS
# HUGE THANKS TO https://www.sports-reference.com/ for providing the data
library(data.table)
library(tidyverse)
library(ggplot2)
library(rvest)
library(stringi)
library(glue)
# pull in functions ----
source("~/GitHub/Sports/2025 CFB ELO Model/20250603 CFB ELO Functions.R")
# data sources ----
winning_games <- read.csv("C:/Users/alexe/OneDrive/Documents/Sports Analysis/2025 CFB Data Modeling/Data Sources/unique cfb games.csv") |>
distinct() |>
rename(location = var_7,
school = winner,
opponent = loser) |>
select(-X) |>
filter(!is.na(pts))
conf_df <- read.csv("C:/Users/alexe/OneDrive/Documents/Sports Analysis/2025 CFB Data Modeling/Data Sources/school conferences.csv") |> arrange(season) |> select(season, school, conf, div)
all_schools <- winning_games$school
all_opponents <- winning_games$opponent
init_ratings <- tibble(school = unique(c(all_opponents, all_schools)),
rating = 1500)
use_elo_df <- data.frame()
new_ratings <- data.frame()
season_vector <- c(1872:2024)
week_games <- list()
season_games <- list()
season_regress_ratings <- list()
#weekly_elo_tracking <- list()  # <-- at the top before loop starts
for(a in season_vector){
#a <- 2024
use_season <- winning_games |>
mutate(wk = as.numeric(wk),
wins = ifelse(pts > opp, 1, 0),
loses = ifelse(pts < opp, 1, 0),
ties = ifelse(pts == opp, 1, 0)) |>
filter(season == a)
beg_week <- min(use_season$wk)
end_week <- max(use_season$wk)
weekly_elo_tracking <- list()  # <-- at the top before loop starts
season_week_end_regress <- list()
for(i in beg_week:end_week){
#i <- 1
if(i == 1 & a == min(season_vector)){
use_elo_df <- init_ratings
}else{
use_elo_df <- new_ratings
}
week_update <- elo_week_update(
df = use_season,
use_elo_df = use_elo_df,
week_int = i,
team_adv = 50,
k_val = 40
)
new_ratings <- team_elo_scores(df = week_update, use_elo_df = use_elo_df)
weekly_elo_tracking[[paste0(a, "_", i)]] <- new_ratings |>
mutate(season = a,
wk = i)
# regress elo ratings if last week of the season
if(i == end_week){
season_conf <- conf_df |>
filter(season == a) |>
select(school,
conf)
season_regress <- regress_ratings(conf_df = season_conf, df = new_ratings, regress_val = 0.4)
new_ratings <- season_regress |>
select(school,
rating = regress_rating)
print(season_regress |> mutate(season = a))
#season_week_end_regress[[i]] <- season_regress |> mutate(season = a) |> filter(school == 'Rutgers')
}else{
new_ratings <- new_ratings
}
#print(season_regress |> mutate(season = a) |> filter(school == 'Rutgers'))
week_games[[i]] <- week_update
#season_week_end_regress[[i]] <- season_regress |> mutate(season = a)
}
regress_df <- rbindlist(season_week_end_regress, fill = T)
season_df <- rbindlist(week_games)
weekly_elo_df <- bind_rows(weekly_elo_tracking) |>
arrange(season, wk, desc(rating))
season_games[[a]] <- season_df
season_regress_ratings[[a]] <- regress_df
#print(rbindlist(season_week_end_regress) |> filter(school == 'Rutgers'))
}
gc()
#### ELO MODEL
# generates historical ELO ratings for each CFB team in FBS
# HUGE THANKS TO https://www.sports-reference.com/ for providing the data
library(data.table)
library(tidyverse)
library(ggplot2)
library(rvest)
library(stringi)
library(glue)
# pull in functions ----
source("~/GitHub/Sports/2025 CFB ELO Model/20250603 CFB ELO Functions.R")
# data sources ----
#winning_games <- read.csv("C:/Users/alexe/OneDrive/Documents/Sports Analysis/2025 CFB Data Modeling/Data Sources/unique cfb games.csv") |>
#  distinct() |>
#  rename(location = var_7,
#         school = winner,
#         opponent = loser) |>
#  select(-X) |>
#  filter(!is.na(pts))
#conf_df <- read.csv("C:/Users/alexe/OneDrive/Documents/Sports Analysis/2025 CFB Data Modeling/Data Sources/school conferences.csv") |> arrange(season) |> select(season, school, conf, div)
all_schools <- winning_games$school
all_opponents <- winning_games$opponent
init_ratings <- tibble(school = unique(c(all_opponents, all_schools)),
rating = 1500)
use_elo_df <- data.frame()
new_ratings <- data.frame()
season_vector <- c(1872:2024)
week_games <- list()
season_games <- list()
season_regress_ratings <- list()
#weekly_elo_tracking <- list()  # <-- at the top before loop starts
for(a in season_vector){
#a <- 2024
use_season <- winning_games |>
mutate(wk = as.numeric(wk),
wins = ifelse(pts > opp, 1, 0),
loses = ifelse(pts < opp, 1, 0),
ties = ifelse(pts == opp, 1, 0)) |>
filter(season == a)
beg_week <- min(use_season$wk)
end_week <- max(use_season$wk)
weekly_elo_tracking <- list()  # <-- at the top before loop starts
season_week_end_regress <- list()
for(i in beg_week:end_week){
#i <- 1
if(i == 1 & a == min(season_vector)){
use_elo_df <- init_ratings
}else{
use_elo_df <- new_ratings
}
week_update <- elo_week_update(
df = use_season,
use_elo_df = use_elo_df,
week_int = i,
team_adv = 50,
k_val = 40
)
new_ratings <- team_elo_scores(df = week_update, use_elo_df = use_elo_df)
weekly_elo_tracking[[paste0(a, "_", i)]] <- new_ratings |>
mutate(season = a,
wk = i)
# regress elo ratings if last week of the season
if(i == end_week){
season_conf <- conf_df |>
filter(season == a) |>
select(school,
conf)
season_regress <- regress_ratings(conf_df = season_conf, df = new_ratings, regress_val = 0.4)
new_ratings <- season_regress |>
select(school,
rating = regress_rating)
print(season_regress |> mutate(season = a))
#season_week_end_regress[[i]] <- season_regress |> mutate(season = a) |> filter(school == 'Rutgers')
}else{
new_ratings <- new_ratings
}
#print(season_regress |> mutate(season = a) |> filter(school == 'Rutgers'))
week_games[[i]] <- week_update
#season_week_end_regress[[i]] <- season_regress |> mutate(season = a)
}
regress_df <- rbindlist(season_week_end_regress, fill = T)
season_df <- rbindlist(week_games)
weekly_elo_df <- bind_rows(weekly_elo_tracking) |>
arrange(season, wk, desc(rating))
season_games[[a]] <- season_df
season_regress_ratings[[a]] <- regress_df
#print(rbindlist(season_week_end_regress) |> filter(school == 'Rutgers'))
}
#### ELO MODEL
# generates historical ELO ratings for each CFB team in FBS
# HUGE THANKS TO https://www.sports-reference.com/ for providing the data
library(here)
# pull in functions ----
source(here("20250603 CFB ELO Functions.R"))
# data sources ----
all_schools <- winning_games$school
all_opponents <- winning_games$opponent
init_ratings <- tibble(school = unique(c(all_opponents, all_schools)),
rating = 1500)
use_elo_df <- data.frame()
new_ratings <- data.frame()
season_vector <- c(1872:2024)
week_games <- list()
season_games <- list()
season_regress_ratings <- list()
#weekly_elo_tracking <- list()  # <-- at the top before loop starts
for(a in season_vector){
#a <- 2024
use_season <- winning_games |>
mutate(wk = as.numeric(wk),
wins = ifelse(pts > opp, 1, 0),
loses = ifelse(pts < opp, 1, 0),
ties = ifelse(pts == opp, 1, 0)) |>
filter(season == a)
beg_week <- min(use_season$wk)
end_week <- max(use_season$wk)
weekly_elo_tracking <- list()  # <-- at the top before loop starts
season_week_end_regress <- list()
for(i in beg_week:end_week){
#i <- 1
if(i == 1 & a == min(season_vector)){
use_elo_df <- init_ratings
}else{
use_elo_df <- new_ratings
}
week_update <- elo_week_update(
df = use_season,
use_elo_df = use_elo_df,
week_int = i,
team_adv = 50,
k_val = 40
)
new_ratings <- team_elo_scores(df = week_update, use_elo_df = use_elo_df)
weekly_elo_tracking[[paste0(a, "_", i)]] <- new_ratings |>
mutate(season = a,
wk = i)
# regress elo ratings if last week of the season
if(i == end_week){
season_conf <- conf_df |>
filter(season == a) |>
select(school,
conf)
season_regress <- regress_ratings(conf_df = season_conf, df = new_ratings, regress_val = 0.4)
new_ratings <- season_regress |>
select(school,
rating = regress_rating)
print(season_regress |> mutate(season = a))
#season_week_end_regress[[i]] <- season_regress |> mutate(season = a) |> filter(school == 'Rutgers')
}else{
new_ratings <- new_ratings
}
#print(season_regress |> mutate(season = a) |> filter(school == 'Rutgers'))
week_games[[i]] <- week_update
#season_week_end_regress[[i]] <- season_regress |> mutate(season = a)
}
regress_df <- rbindlist(season_week_end_regress, fill = T)
season_df <- rbindlist(week_games)
weekly_elo_df <- bind_rows(weekly_elo_tracking) |>
arrange(season, wk, desc(rating))
season_games[[a]] <- season_df
season_regress_ratings[[a]] <- regress_df
#print(rbindlist(season_week_end_regress) |> filter(school == 'Rutgers'))
}
elo_df <- rbindlist(season_games, fill = TRUE) |>
distinct() |>
rename(elo_a = school_elo,
elo_b = opponent_elo,
p_a = p_team,
team_a = school,
team_b = opponent) |>
select(-p_opponent) |>
arrange(season,
wk)
full_elo_df <- elo_df |>
distinct() |>
select(season,
wk,
team_a = team_b,
team_b = team_a,
location,
pts = opp,
opp = pts,
ps,
elo_adj,
p_a,
elo_a = elo_b,
elo_b = elo_a) |>
mutate(p_a = 1-p_a,
location = case_when(location == '' ~ '@',
location == '@' ~ '',
location == 'N' ~ 'N')) |>
bind_rows(elo_df) |>
mutate(result = case_when(pts > opp ~ 'W',
pts < opp ~ 'L',
pts == opp ~ 'T'))
write.csv(full_regress_scores, "C:/Users/alexe/OneDrive/Documents/Sports Analysis/CFB ELO Model/full_regress_scores.csv")
# ---- libs & functions ----
library(tidyverse)
library(here)
source(here("R", "elo_functions.R"))
# ---- libs & functions ----
library(tidyverse)
library(here)
source(here("20250603 CFB ELO Functions.R"))
# ---- load snapshot or initialize ----
snapshot_path <- here("data", "state", "elo_snapshot.rds")
if (file.exists(snapshot_path)) {
snap <- readRDS(snapshot_path)
elo_table        <- snap$ratings        # current ratings
last_season_play <- snap$last_season    # last season played / gap tracker
weekly_history   <- snap$weekly_history # long table
message("Loaded existing snapshot")
} else {
teams <- unique(c(winning_games$school, winning_games$opponent))
elo_table        <- tibble(school = teams, rating = 1500)
last_season_play <- tibble(school = teams, last_season = NA_integer_)
weekly_history   <- tibble()            # empty
message("No snapshot found – starting fresh")
}
# ---- choose the season & newest week to add ----
season_now <- 2025
latest_week_have <- weekly_history %>%
filter(season == season_now) %>%
summarise(max_wk = max(week, 0, na.rm = TRUE)) %>%
pull(max_wk)
weekly_history
library(tidyverse)
library(here)
source(here("20250603 CFB ELO Functions.R"))
# ---- Load data ----
all_schools <- winning_games$school
all_opponents <- winning_games$opponent
init_ratings <- tibble(school = unique(c(all_schools, all_opponents)), rating = 1500)
season_vector <- 1872:2024
all_weekly_elo <- list()
final_ratings <- init_ratings
for (season in season_vector) {
season_data <- winning_games %>%
filter(season == !!season) %>%
mutate(
wk = as.integer(wk),
wins = ifelse(pts > opp, 1, 0),
loses = ifelse(pts < opp, 1, 0),
ties = ifelse(pts == opp, 1, 0)
)
beg_week <- min(season_data$wk, na.rm = TRUE)
end_week <- max(season_data$wk, na.rm = TRUE)
for (wk in beg_week:end_week) {
week_update <- elo_week_update(
df = season_data,
use_elo_df = final_ratings,
week_int = wk,
team_adv = 50,
k_val = 40
)
final_ratings <- team_elo_scores(df = week_update, use_elo_df = final_ratings)
all_weekly_elo[[paste0(season, "_", wk)]] <- final_ratings %>%
mutate(season = season, week = wk)
}
# End-of-season regression
season_conf <- conf_df %>% filter(season == season) %>% select(school, conf)
regressed <- regress_ratings(conf_df = season_conf, df = final_ratings, regress_val = 0.4)
final_ratings <- regressed %>% select(school, rating = regress_rating)
}
# ---- Save snapshot ----
weekly_elo_df <- bind_rows(all_weekly_elo) %>%
arrange(season, week, desc(rating))
elo_snapshot <- list(
ratings = final_ratings,
last_season = tibble(school = final_ratings$school, last_season = max(season_vector)),
weekly_history = weekly_elo_df
)
saveRDS(elo_snapshot, here("data", "state", "elo_snapshot.rds"))
final_ratings
regressed
season_conf
week_update
View(final_ratings)
