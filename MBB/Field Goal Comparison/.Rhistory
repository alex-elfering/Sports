fga,
x2p,
x2pa,
x3p,
x3pa,
pts)
clean_player_index |>
pivot_longer(cols = -c('season', 'player', 'schl'),
names_to = 'stat',
values_to = 'value') |>
mutate(value = as.numeric(value))
# exploring three-point shooting tendencies
#roster ----
player_roster <- read.csv('C:/Users/alexe/OneDrive/Documents/Sports Analysis/MBB Returning Production/player roster.csv')
school_name_capitalized <- player_roster |>
distinct(schl) |>
mutate(school_name = case_when(schl == 'loyola-il' ~ 'Loyola (IL)',
schl == 'miami-oh' ~ 'Miami (OH)',
schl == 'illinois-chicago' ~ 'Illinois-Chicago',
schl == 'iupui' ~ 'IUPUI',
schl == 'nebraska-omaha' ~ 'Omaha',
TRUE ~ tools::toTitleCase(gsub('-', ' ', schl))))
clean_roster <- player_roster |>
left_join(school_name_capitalized) |>
select(player,
pos,
season,
school_name,
class)
# player index  ----
player_index <- read.csv('C:/Users/alexe/OneDrive/Documents/Sports Analysis/MBB Returning Production/player game stats.csv')
clean_player_index <- player_index |>
mutate(date = ymd(date),
season = ifelse(month(date) >= 1 & month(date) <= 4, year(date)-1, year(date))) |>
filter(schl != 'Schl') |>
select(player,
season,
schl,
gs,
mp,
ft,
fta,
fg,
fga,
x2p,
x2pa,
x3p,
x3pa,
pts)
shooting_stats <- clean_player_index |>
select(-gs,
-mp) |>
pivot_longer(cols = -c('season', 'player', 'schl'),
names_to = 'stat',
values_to = 'value') |>
mutate(value = as.numeric(value))
shooting_stats
# exploring three-point shooting tendencies
#roster ----
player_roster <- read.csv('C:/Users/alexe/OneDrive/Documents/Sports Analysis/MBB Returning Production/player roster.csv')
school_name_capitalized <- player_roster |>
distinct(schl) |>
mutate(school_name = case_when(schl == 'loyola-il' ~ 'Loyola (IL)',
schl == 'miami-oh' ~ 'Miami (OH)',
schl == 'illinois-chicago' ~ 'Illinois-Chicago',
schl == 'iupui' ~ 'IUPUI',
schl == 'nebraska-omaha' ~ 'Omaha',
TRUE ~ tools::toTitleCase(gsub('-', ' ', schl))))
clean_roster <- player_roster |>
left_join(school_name_capitalized) |>
select(player,
pos,
season,
school_name,
class)
# player index  ----
player_index <- read.csv('C:/Users/alexe/OneDrive/Documents/Sports Analysis/MBB Returning Production/player game stats.csv')
clean_player_index <- player_index |>
mutate(date = ymd(date),
season = ifelse(month(date) >= 1 & month(date) <= 4, year(date)-1, year(date))) |>
filter(schl != 'Schl') |>
select(player,
season,
schl,
gs,
mp,
ft,
fta,
fg,
fga,
x2p,
x2pa,
x3p,
x3pa,
pts)
shooting_stats <- clean_player_index |>
select(-gs,
-mp) |>
pivot_longer(cols = -c('season', 'player', 'schl'),
names_to = 'stat',
values_to = 'value') |>
mutate(value = as.numeric(value))
clean_player_index |>
select(player,
season,
schl,
gs,
mp) |>
group_by(player,
season,
schl) |>
summarise(games = n(),
gs = sum(as.numeric(gs)),
mp = sum(as.numeric(mp)))
# exploring three-point shooting tendencies
#roster ----
player_roster <- read.csv('C:/Users/alexe/OneDrive/Documents/Sports Analysis/MBB Returning Production/player roster.csv')
school_name_capitalized <- player_roster |>
distinct(schl) |>
mutate(school_name = case_when(schl == 'loyola-il' ~ 'Loyola (IL)',
schl == 'miami-oh' ~ 'Miami (OH)',
schl == 'illinois-chicago' ~ 'Illinois-Chicago',
schl == 'iupui' ~ 'IUPUI',
schl == 'nebraska-omaha' ~ 'Omaha',
TRUE ~ tools::toTitleCase(gsub('-', ' ', schl))))
clean_roster <- player_roster |>
left_join(school_name_capitalized) |>
select(player,
pos,
season,
school_name,
class)
# player index  ----
player_index <- read.csv('C:/Users/alexe/OneDrive/Documents/Sports Analysis/MBB Returning Production/player game stats.csv')
clean_player_index <- player_index |>
mutate(date = ymd(date),
season = ifelse(month(date) >= 1 & month(date) <= 4, year(date)-1, year(date))) |>
filter(schl != 'Schl') |>
select(player,
season,
schl,
gs,
mp,
ft,
fta,
fg,
fga,
x2p,
x2pa,
x3p,
x3pa,
pts)
shooting_stats <- clean_player_index |>
select(-gs,
-mp) |>
pivot_longer(cols = -c('season', 'player', 'schl'),
names_to = 'stat',
values_to = 'value') |>
mutate(value = as.numeric(value))
playing_stats <- clean_player_index |>
select(player,
season,
schl,
gs,
mp) |>
group_by(player,
season,
schl) |>
summarise(games = n(),
gs = sum(as.numeric(gs)),
mp = sum(as.numeric(mp)))
shooting_stats
playing_stats
shooting_stats
shooting_stats
clean_roster
View(playing_stats)
View(shooting_stats)
clean_player_index |>
select(-gs,
-mp) |>
pivot_longer(cols = -c('season', 'player', 'schl'),
names_to = 'stat',
values_to = 'value') |>
group_by(season,
player,
schl) |>
mutate(value = as.numeric(value)) |>
summarise_if(is.numeric, sum) |>
ungroup()
shooting_stats <- clean_player_index |>
select(-gs,
-mp) |>
pivot_longer(cols = -c('season', 'player', 'schl'),
names_to = 'stat',
values_to = 'value') |>
group_by(season,
player,
schl) |>
mutate(value = as.numeric(value)) |>
summarise_if(is.numeric, sum) |>
ungroup()
shooting_stats
clean_player_index |>
select(-gs,
-mp) |>
pivot_longer(cols = -c('season', 'player', 'schl'),
names_to = 'stat',
values_to = 'value') |>
group_by(season,
player,
schl,
stat) |>
mutate(value = as.numeric(value)) |>
summarise_if(is.numeric, sum) |>
ungroup()
# exploring three-point shooting tendencies
#roster ----
player_roster <- read.csv('C:/Users/alexe/OneDrive/Documents/Sports Analysis/MBB Returning Production/player roster.csv')
school_name_capitalized <- player_roster |>
distinct(schl) |>
mutate(school_name = case_when(schl == 'loyola-il' ~ 'Loyola (IL)',
schl == 'miami-oh' ~ 'Miami (OH)',
schl == 'illinois-chicago' ~ 'Illinois-Chicago',
schl == 'iupui' ~ 'IUPUI',
schl == 'nebraska-omaha' ~ 'Omaha',
TRUE ~ tools::toTitleCase(gsub('-', ' ', schl))))
clean_roster <- player_roster |>
left_join(school_name_capitalized) |>
select(player,
pos,
season,
school_name,
class)
# player index  ----
player_index <- read.csv('C:/Users/alexe/OneDrive/Documents/Sports Analysis/MBB Returning Production/player game stats.csv')
clean_player_index <- player_index |>
mutate(date = ymd(date),
season = ifelse(month(date) >= 1 & month(date) <= 4, year(date)-1, year(date))) |>
filter(schl != 'Schl') |>
select(player,
season,
schl,
gs,
mp,
ft,
fta,
fg,
fga,
x2p,
x2pa,
x3p,
x3pa,
pts)
shooting_stats <- clean_player_index |>
select(-gs,
-mp) |>
pivot_longer(cols = -c('season', 'player', 'schl'),
names_to = 'stat',
values_to = 'value') |>
group_by(season,
player,
schl,
stat) |>
mutate(value = as.numeric(value)) |>
summarise_if(is.numeric, sum) |>
ungroup()
playing_stats <- clean_player_index |>
select(player,
season,
schl,
gs,
mp) |>
group_by(player,
season,
schl) |>
summarise(games = n(),
gs = sum(as.numeric(gs)),
mp = sum(as.numeric(mp)))
shooting_stats
shooting_stats <- clean_player_index |>
select(-gs,
-mp) |>
pivot_longer(cols = -c('season', 'player', 'schl'),
names_to = 'stat',
values_to = 'value') |>
group_by(season,
player,
schl,
stat) |>
mutate(value = as.numeric(value)) |>
summarise_if(is.numeric, sum) |>
ungroup()
playing_stats <- clean_player_index |>
select(player,
season,
schl,
gs,
mp) |>
group_by(player,
season,
schl) |>
summarise(games = n(),
gs = sum(as.numeric(gs)),
mp = sum(as.numeric(mp)))
playing_stats
setwd("C:/Users/alexe/OneDrive/Documents/GitHub/Sports/MBB/Field Goal Comparison")
# exploring three-point shooting tendencies
#roster ----
player_roster <- read.csv('C:/Users/alexe/OneDrive/Documents/Sports Analysis/MBB Returning Production/player roster.csv')
school_name_capitalized <- player_roster |>
distinct(schl) |>
mutate(school_name = case_when(schl == 'loyola-il' ~ 'Loyola (IL)',
schl == 'miami-oh' ~ 'Miami (OH)',
schl == 'illinois-chicago' ~ 'Illinois-Chicago',
schl == 'iupui' ~ 'IUPUI',
schl == 'nebraska-omaha' ~ 'Omaha',
TRUE ~ tools::toTitleCase(gsub('-', ' ', schl))))
clean_roster <- player_roster |>
left_join(school_name_capitalized) |>
select(player,
pos,
season,
school_name,
class)
# player index  ----
player_index <- read.csv('C:/Users/alexe/OneDrive/Documents/Sports Analysis/MBB Returning Production/player game stats.csv')
clean_player_index <- player_index |>
mutate(date = ymd(date),
season = ifelse(month(date) >= 1 & month(date) <= 4, year(date)-1, year(date))) |>
filter(schl != 'Schl') |>
select(player,
season,
schl,
gs,
mp,
ft,
fta,
fg,
fga,
x2p,
x2pa,
x3p,
x3pa,
pts)
shooting_stats <- clean_player_index |>
select(-gs,
-mp) |>
pivot_longer(cols = -c('season', 'player', 'schl'),
names_to = 'stat',
values_to = 'value') |>
group_by(season,
player,
schl,
stat) |>
mutate(value = as.numeric(value)) |>
summarise_if(is.numeric, sum) |>
ungroup()
playing_stats <- clean_player_index |>
select(player,
season,
schl,
gs,
mp) |>
group_by(player,
season,
schl) |>
summarise(games = n(),
gs = sum(as.numeric(gs)),
mp = sum(as.numeric(mp))) |>
ungroup()
# data export ----
write.csv(clean_roster, "C:/Users/alexe/OneDrive/Documents/GitHub/Sports/MBB/Field Goal Comparison/roster.csv")
write.csv(shooting_stats, "C:/Users/alexe/OneDrive/Documents/GitHub/Sports/MBB/Field Goal Comparison/shooting stats.csv")
write.csv(playing_stats, "C:/Users/alexe/OneDrive/Documents/GitHub/Sports/MBB/Field Goal Comparison/playing time.csv")
playing_stats
library(lubridate)
date <- ymd_hm('2023-11-29')
library(lubridate)
date <- POSIXct('2023-11-29')
library(lubridate)
date <- POSIXct('2023-11-29 18:00')
library(lubridate)
date <- ymd_hm('2023-11-29 18:00')
date
library(lubridate)
date <- ymd_hm('2023-11-29 18:00') + hours(18)
date
# how much returning production does drake's men's basketball team return each year?
library(data.table)
library(tidyverse)
library(ggplot2)
library(rvest)
library(stringi)
library(glue)
library(lubridate)
library(janitor)
language_df <- data.frame(language = c('日本語',
#'français',
'中文',
'廣東話',
'繁体字')) |>
mutate(rating = 5)
results_7 <- list()
for(t in 1:3){
print(t)
game_results <- list()
results_list <- list()
for(i in 1:runif(1,9900,11000)){
rand_print <- round(runif(1,100,350))
game_sim <- language_df %>%
mutate(ratingMOD = rating) |>
group_by(language) |>
slice(rep(1:n(), each = ratingMOD)) |>
ungroup()
results <- game_sim[sample(nrow(game_sim), 1), ] |>
mutate(iter = i) |>
select(iter, language) |>
distinct() |>
inner_join(language_df,
by = c('language' = 'language')) |>
select(iter,
language)
if(i%%rand_print==0){print(as.character(results[2]))}
game_results[[i]] <- results
}
freq <- rbindlist(game_results)
game_rank <- freq |>
#arrange(game)|>
group_by(language) |>
summarise(n = n()) |>
ungroup()
game_rank$val <- with(game_rank,runif(nrow(game_rank),1.1,10.1))
result_round <- game_rank |>
mutate(rank_n = dense_rank(desc(n))) |>
mutate(final_score = round(n*val,3)) |>
arrange(desc(final_score)) |>
mutate(diff = final_score-lag(final_score),
val = round(val,2)) |>
mutate(round = t) |>
filter(dense_rank(desc(final_score)) <=2)
results_7[[t]] <- result_round
}
multiple_rounds <- rbindlist(results_7) |>
group_by(language) |>
summarise(n = n()) |>
ungroup() |>
arrange(desc(n)) |>
mutate(n_pct = n/sum(n),
rank_pct = dense_rank(desc(n_pct)))
multiple_rounds
is_majority <- multiple_rounds |>
filter(rank_pct == 1) |>
distinct(n_pct) |>
as.numeric()
if(is_majority < 0.5){
print('runoff time')
top_languages <- multiple_rounds |>
filter(row_number() <= 2)
language_df <- dplyr::filter(language_df, language %in% top_languages$language)
results_7 <- list()
for(t in 1:3){
print(t)
game_results <- list()
results_list <- list()
for(i in 1:runif(1,9900,11000)){
rand_print <- round(runif(1,100,350))
game_sim <- language_df %>%
mutate(ratingMOD = rating) |>
group_by(language) |>
slice(rep(1:n(), each = ratingMOD)) |>
ungroup()
results <- game_sim[sample(nrow(game_sim), 1), ] |>
mutate(iter = i) |>
select(iter, language) |>
distinct() |>
inner_join(language_df,
by = c('language' = 'language')) |>
select(iter,
language)
#if(i%%rand_print==0){print(as.character(results[2]))}
game_results[[i]] <- results
}
freq <- rbindlist(game_results)
game_rank <- freq |>
#arrange(game)|>
group_by(language) |>
summarise(n = n()) |>
ungroup()
game_rank$val <- with(game_rank,runif(nrow(game_rank),1.1,10.1))
result_round <- game_rank |>
mutate(rank_n = dense_rank(desc(n))) |>
mutate(final_score = round(n*val,3)) |>
arrange(desc(final_score)) |>
mutate(diff = final_score-lag(final_score),
val = round(val,2)) |>
mutate(round = t) |>
filter(dense_rank(desc(final_score)) <=1)
results_7[[t]] <- result_round
}
run_off <- rbindlist(results_7) |>
group_by(language) |>
summarise(n = n()) |>
ungroup() |>
arrange(desc(n)) |>
mutate(n_pct = n/sum(n),
rank_pct = dense_rank(desc(n_pct)))
run_off
}else{
multiple_rounds |>
filter(row_number() == 1)
}
